# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'desktop.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import os
import random
import pathlib
from PyQt5 import QtCore, QtGui, QtWidgets

from QuoteEngine import QuoteModel, Ingestor
from MemeEngine import MemeEngine

def setup():
    """
    Load all resources.
    
    :return quotes: a list of QuoteModel objects.
    :return imgs: a list of fully constructed image paths.
    """
    quote_files = ['./_data/DogQuotes/DogQuotesTXT.txt',
                   './_data/DogQuotes/DogQuotesDOCX.docx',
                   './_data/DogQuotes/DogQuotesPDF.pdf',
                   './_data/DogQuotes/DogQuotesCSV.csv']

    # Generate a list of quote objects from all quote files
    quotes = []
    for file in quote_files:
        quotes.extend(Ingestor.parse(file))

    # Find all images within the image directory
    images_path = "./_data/photos/dog/"
    imgs = []
    for root, dirs, files in os.walk(images_path):
        imgs = [os.path.join(root, name) for name in files]

    return quotes, imgs


class Ui_MemeApp(object):
    def setupUi(self, MainWindow):
        """Initial UI setup configuration. Define window size, image and button(s) location
        and position, and other relevant configurations."""
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(502, 528)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Button configurations
        self.randomButton = QtWidgets.QPushButton(self.centralwidget)
        self.randomButton.setGeometry(QtCore.QRect(175, 400, 75, 23))
        self.randomButton.setWhatsThis("")
        self.randomButton.setObjectName("randomButton")
        self.randomButton.clicked.connect(self.click_random)
        self.createButton = QtWidgets.QPushButton(self.centralwidget)
        self.createButton.setGeometry(QtCore.QRect(255, 400, 75, 23))
        self.createButton.setObjectName("createButton")
        self.createButton.clicked.connect(self.form_window)

        # Display generated meme on the main self.window
        img_path = self.random_meme()
        self.memeImage = QtWidgets.QLabel(self.centralwidget)
        self.memeImage.setGeometry(QtCore.QRect(0, 0, 501, 381))
        self.memeImage.setText("")
        self.memeImage.setPixmap(QtGui.QPixmap(img_path))
        self.memeImage.setScaledContents(True)
        self.memeImage.setObjectName("memeImage")

        # Central widget and menu bar configurations
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 502, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Meme Generator"))
        self.randomButton.setStatusTip(_translate("MainWindow", "Generate a random meme"))
        self.randomButton.setText(_translate("MainWindow", "Random"))
        self.createButton.setStatusTip(_translate("MainWindow", "Create a custom meme"))
        self.createButton.setText(_translate("MainWindow", "Creator"))

    def random_meme(self):
        """Generate a random meme and return the file path."""
        quotes, imgs = setup()
        quote = random.choice(quotes)
        img = random.choice(imgs)
        meme = MemeEngine('./tmp')
        path = meme.make_meme(img, quote.body, quote.author)
        return path

    def click_random(self):
        """Generate a new image whenever the `random` button is clicked."""
        path = self.random_meme()
        self.memeImage.setPixmap(QtGui.QPixmap(path))

    def form_window(self):
        """Open a new window with an input form."""
        self.window = FormWindow()
        self.window.show()
        # MainWindow.close()


class FormWindow(QtWidgets.QWidget):
    """Generate new window with an input form for custom meme creation."""

    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):
        self.setWindowTitle('Create Your Meme')
        self.resize(502, 528)

        # Create image selector
        self.file_label = QtWidgets.QLabel('Select Image:')
        self.file_label.setFont(QtGui.QFont("Helvetica", 14))
        self.file_selector = QtWidgets.QPushButton('Browse')
        self.file_selector.clicked.connect(self.select_image)

        # Create text fields
        self.quote_label = QtWidgets.QLabel('Quote:')
        self.quote_label.setFont(QtGui.QFont("Helvetica", 14))
        self.quote_field = QtWidgets.QLineEdit()
        self.author_label = QtWidgets.QLabel('Author:')
        self.author_label.setFont(QtGui.QFont("Helvetica", 14))
        self.author_field = QtWidgets.QLineEdit()

        # Create submit button
        self.submit_button = QtWidgets.QPushButton('Create Meme!')
        self.submit_button.clicked.connect(self.submit_form)

        # Add all elements to layout
        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(self.file_label)
        layout.addWidget(self.file_selector)
        layout.addWidget(self.quote_label)
        layout.addWidget(self.quote_field)
        layout.addWidget(self.author_label)
        layout.addWidget(self.author_field)
        layout.addWidget(self.submit_button)
        self.setLayout(layout)

    def select_image(self):
        # Open file dialog and set selected file to label
        file_dialog = QtWidgets.QFileDialog()
        file_dialog.setDefaultSuffix('.txt')
        path = str(pathlib.Path.home()) + "\\Downloads"
        filename, _ = file_dialog.getOpenFileName(self, "Choose an image", 
                                    path, "PNG Files (*.png);; JPG Files (*.jpg)")
        self.file_label.setText('Selected file: ' + filename)

    def submit_form(self):
        # Get all form data and print to console
        img = self.file_label.text().split(': ')[1]
        qt_body = self.quote_field.text()
        qt_author = self.author_field.text()

        # Create meme
        quote = QuoteModel(qt_body, qt_author)
        meme = MemeEngine('./tmp')
        img_path = meme.make_meme(img, quote.body, quote.author)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MemeApp()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
